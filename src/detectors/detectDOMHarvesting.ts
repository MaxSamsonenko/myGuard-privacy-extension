import type { Threat } from "../content/types";

export function detectDomHarvesting(): Threat[] {
	const threats: Threat[] = [];

	// üîç –ó–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å inline JavaScript
	const inlineScripts = Array.from(
		document.querySelectorAll("script:not([src])")
	);

	inlineScripts.forEach((script, index) => {
		const content = (script.textContent || "").toLowerCase();

		let readFlags = 0;
		let sendFlags = 0;

		// üß† –ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è DOM
		if (
			content.includes("input.value") ||
			content.includes(".value") ||
			content.includes("textarea.value") ||
			content.includes("select.value") ||
			content.includes(".textcontent") ||
			content.includes(".innertext")
		) {
			readFlags++;
		}

		// üì§ –ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–∏—Ö
		if (
			content.includes("fetch(") ||
			content.includes("xmlhttprequest") ||
			content.includes("formdata") ||
			content.includes(".send(") ||
			content.includes("navigator.sendbeacon")
		) {
			sendFlags++;
		}

		// –Ø–∫—â–æ —î —ñ —á–∏—Ç–∞–Ω–Ω—è, —ñ –ø–µ—Ä–µ–¥–∞—á–∞ ‚Äî –ø—ñ–¥–æ–∑—Ä–∞ –Ω–∞ harvesting
		if (readFlags > 0 && sendFlags > 0) {
			threats.push({
				message: `‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –º–æ–∂–ª–∏–≤–µ DOM-–∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –¥–∞–Ω–∏—Ö (—Å–∫—Ä–∏–ø—Ç ‚Ññ${
					index + 1
				})`,
				html: script.textContent?.slice(0, 300) + "...",
			});
		}
	});

	return threats;
}
